name: "Build iOS app"

on:
  release:
    types: [prereleased]

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version
      - name: checkout repository
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILES_BASE64: ${{ secrets.PROVISION_PROFILES_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_ARCHIVE=$RUNNER_TEMP/mobile_pp.tgz
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILES_BASE64" | base64 --decode -o $PP_ARCHIVE

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          echo "P12_PASSWORD: $P12_PASSWORD"
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          tar xzvf $PP_ARCHIVE -C $RUNNER_TEMP
          for PROVISION in `ls $RUNNER_TEMP/*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i $PROVISION)`
            echo "$UUID.mobileprovision"
            cp $PROVISION ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          done

          security find-identity -v -p codesigning
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles     

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Clean workspace
        run: |
          git clean -ffdx
          npm cache clean --force

      
      - name: Install npm dependencies
        run: |
          npm install

      - name: Decode Google Services
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES_IOS_BASE64_PRODUCTION }}
  
        run: |
          mkdir -p google-services/ios
          echo $GOOGLE_SERVICES > gs.ios.plist
          base64 -d -i gs.ios.plist > ./google-services/ios/production-GoogleService-Info.plist

      - name: Clean Xcode Build
        run: |
          cd ios
          xcodebuild clean -workspace Splitsies.xcworkspace -scheme "Splitsies production Release"

      - name: install Cocoapod dependencies
        run: |
          cd ios
          pod repo update
          pod install  

      - name: build archive
        run: |
          cd ios
          xcodebuild -workspace Splitsies.xcworkspace \
          -scheme "Splitsies production Release" \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/Splitsies.xcarchive \
          archive   

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/Splitsies.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ runner.temp }}/build
          retention-days: 3

      - name: Publish to TestFlight
        env:
          USERNAME: ${{ secrets.APPLE_DEVELOPER_USERNAME }}
          PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
        run: |
          ls -l $RUNNER_TEMP/build
          cd ios && xcrun altool --upload-app -f $RUNNER_TEMP/build/Splitsies.ipa -t ios -u $USERNAME -p $PASSWORD